"""
Задание 1.

Реализуйте функции:

a) заполнение списка, оцените сложность в O-нотации
   заполнение словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

b) получение элемента списка, оцените сложность в O-нотации
   получение элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени

с) удаление элемента списка, оцените сложность в O-нотации
   удаление элемента словаря, оцените сложность в O-нотации
   сделайте аналитику, что заполняется быстрее и почему
   сделайте замеры времени


ВНИМАНИЕ: в задании три пункта
НУЖНО выполнить каждый пункт
обязательно отделяя каждый пункт друг от друга

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)
вы уже знаете, что такое декоратор и как его реализовать,
обязательно реализуйте ф-цию-декоратор и пусть она считает время
И примените ее к своим функциям!
"""

from timeit import default_timer, timeit


def time_it(func):
    """Декоратор для замера времени"""

    def wrapper(*args):
        start_time = default_timer()
        func(*args)
        print(default_timer() - start_time)

    return wrapper


# a) заполнение списка, оцените сложность в O-нотации
# заполнение словаря, оцените сложность в O-нотации
# сделайте аналитику, что заполняется быстрее и почему
# сделайте замеры времени

my_list = []
my_dict = {}


@time_it # время: 2.494999999998193e-06  # O(n)
def fill_list(li):
    li.extend(range(1, 100))


@time_it # время: 9.663000000000033e-06  # O(n)
def fill_dict(di):
    for i in range(1, 100):
        di[i] = i


fill_list(my_list)
fill_dict(my_dict)

# b) получение элемента списка, оцените сложность в O-нотации
# получение элемента словаря, оцените сложность в O-нотации
# сделайте аналитику, что заполняется быстрее и почему
# сделайте замеры времени


@time_it
def get_li_element(li, ind):  # время: 4.720000000013602e-07  # O(1)
    return li[ind]


@time_it
def get_dict_el(di, el):  # время: 3.5100000000259923e-07  # O(1)
    return di[el]


get_li_element(my_list, 1)
get_dict_el(my_dict, 3)

# с) удаление элемента списка, оцените сложность в O-нотации
# удаление элемента словаря, оцените сложность в O-нотации
# сделайте аналитику, что заполняется быстрее и почему
# сделайте замеры времени


@time_it
def del_li_elem(li, ind):  # время: 5.57999999997727e-07  # O(1)
    del li[ind]


@time_it
def del_dict_elem(di, el):  # время: 4.619999999996849e-07  # O(1)
    del di[el]


del_li_elem(my_list, 1)
del_dict_elem(my_dict, 1)